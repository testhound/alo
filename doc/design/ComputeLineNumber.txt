----------------------------------------------------------------------
  Computation of original source line numbers
  for acurate error reporting....
----------------------------------------------------------------------

  The input assembly file is preprocessed and
  fed to the front-end of the ALO.

  After ALO front-end parses  
  the '.i' file it generates LLIR which 
  is a hierarchy of LlirNodes(insns and directives)
  annotated with line numbers corresponding to that of 
  preprocessed file.

  During Semantic analysis when an error is found
  in any of the LlirNode, it is the responsibility
  of ALO to report an error in the line which corresponds
  to original source file and not the preprocessed 
  file's line number.

  ALO can get back this information about the original
  source file where this line is found by using the
  #line directives introduced by the pre-processor. 

  The original source line can be computed by
  the following equation. In this equation 'node'
  current LlirNode which can be a directive node
  or an Instruction under consideration.

  (node's src line num) = (current node's line num) -
                          (prev LCD node's line num) - 1 +
	   	          (prev LCD's line control number)


  (Please note that Line control directive nodes
   are present only in the .i file)

----------------------------------------------------------------------
Preprocessor directives:
----------------------------------------------------------------------

The following two types of Line Control Directives (LCD)
generated by the pre-processor are important for this
discussion.

#line linenum 
      linenum is a non-negative decimal integer constant. It 
      specifies the line number which should be reported for the 
      following line of input. Subsequent lines are counted from 
      linenum. 

#line linenum filename 
      linenum is the same as for the first form, and has the same 
      effect. In addition, filename is a string constant. The 
      following line and all subsequent lines are reported to come 
      from the file it specifies, until something else happens to 
      change that. filename is interpreted according to the normal 
      rules for a string constant: backslash escapes are interpreted. 
      This is different from #include. 


----------------------------------------------------------------------
 Source files listing....
----------------------------------------------------------------------
kumark:seattle130<22> cat -n t2.h
     1	
     2	add r1 r2 r3
     3	
     4	bci foo ESS0 r63
     5	
     6	sub r1 r2 r3
     7	
kumark:seattle130<23> cat -n t3.h
     1	
     2	xor r1 r2 r3
     3	
     4	bci foo ESS0 r63
     5	
     6	or r1 r2 r3
     7	
kumark:seattle130<24> cat -n t1.s
     1	#include "t2.h"
     2	
     3	and r1 r2 r3
     4	
     5	#include "t3.h"
     6	
     7	add r1 r2 r3 MOD2
     8	
     9	sub r1 r2 r3 MOD4
    10	
----------------------------------------------------------------------
Preprocessed file listing....
----------------------------------------------------------------------
kumark:seattle130<4> cat -n t1.i
     1	# 1 "t1.s"
     2	# 1 "t2.h" 1
     3	
     4	add r1 r2 r3
     5	
     6	bci foo ESS0 r63
     7	
     8	sub r1 r2 r3
     9	
    10	# 1 "t1.s" 2
    11	
    12	
    13	add r1 r2 r3
    14	
    15	# 1 "t3.h" 1
    16	
    17	xor r1 r2 r3
    18	
    19	bci foo ESS0 r63
    20	
    21	or r1 r2 r3
    22	
    23	# 5 "t1.s" 2
    24	
    25	
    26	add r1 r2 r3 MOD2
    27	
    28	sub r1 r2 r3 MOD4
    29	

----------------------------------------------------------------------
Example:
----------------------------------------------------------------------

t1.i corresponds to preprocessor output file for input t1.s file. 

"sub r1 r2 r3 MOD4"  corresponds to  line 28 in the .i file.

Its corresponding source line number is 9.

The prev LCD appears in the .i file at line number 23 and has 
line control number of 5.

The computation of original source line number is as per above mentioned 
equation is.

   original src line num = 28 - 23 - 1 + 5
	                 = 9


